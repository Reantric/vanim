package vanim.directions.subscene;

import vanim.core.Applet;
import vanim.directions.Scene;
import vanim.mfunc.Narrator;
import vanim.geometry.twodim.CartesianPlane;
import vanim.geometry.twodim.Plane;
import vanim.root.CanvasObject;
import vanim.root.builder.LineBuilder;
import vanim.root.builder.ParametricBuilder;
import vanim.root.builder.TextBuilder;
import vanim.root.exception.ImpossibleBoundsException;
import vanim.root.exception.IncorrectBoundsException;
import vanim.root.vobjects.AbsoluteVObject;
import vanim.root.builder.VObjectBuilder;
import vanim.shapes.Circle;
import vanim.shapes.DoubleLine;
import vanim.shapes.Line;
import vanim.shapes.functional.graph.Graph2D;
import vanim.specific.rational.Fraction;
import vanim.storage.Color;
import vanim.storage.Scale;
import vanim.storage.vector.FVector;
import vanim.storage.vector.IVector;
import vanim.text.LaTeX;
import vanim.util.Mapper;
import vanim.util.Reason;
import vanim.util.Useful;

import java.util.Map;

import static vanim.directions.Directions.*;
import static vanim.util.map.MapEase.EASE_IN_OUT;
import static vanim.util.map.MapType.LINEAR;
import static vanim.util.map.MapType.SINUSOIDAL;

public final class Scene1 extends Scene {

    public static Scale sinus = new Scale(1, 1);
    public static CartesianPlane plane;
    public static Circle b;
    public static Narrator n;
    public static Line l;
    public static boolean changeHue = false;
    public static LaTeX bruh;
    public static Graph2D graph2D;
    Map.Entry<Long, Long> frac = Fraction.reduce(0, 1);
    // Ascending order

    public Scene1(Applet window) throws IncorrectBoundsException, ImpossibleBoundsException {
        super(window);
        plane = new CartesianPlane(window, new FVector(), new IVector(1920, 1080), new FVector(1, 1));
        b = new Circle(new VObjectBuilder(plane,new FVector(),1.4f,new Color()),4);
        n = new Narrator(plane.getCanvas());
        l = new Line(new LineBuilder(plane,new FVector(0,0.44f), new FVector(1,1)));
        bruh = new LaTeX(new TextBuilder(plane, "\\[ x^2 = sin(9x) \\]", new FVector(0, 0), 120, new Color(190, 255, 255)));
       // System.out.println("welcome to the game!");
       // graph2D = new Graph2D(new ParametricBuilder(plane, t->t, t->t*t,3,new Color(255,255,255)));
    }

    @Override
    public boolean execute() {

        step[0] = plane.generatePlane();

        /* Maybe think about a MObject[] or ArrayList<MObject> where display can be called on everyone */

        if (step[0]) {
            l.display();
         //   graph2D.display();
            plane.getColor().getHue().interpolate(changeHue ? 0 : 255, LINEAR, 1);
            if (plane.getColor().getHue().is255())
                changeHue = true;
            else if (plane.getColor().getHue().is0())
                changeHue = false;

            b.scale(sinus);
            bruh.setColor(plane.getColor().invert()); // :) Well this aint g00d
            if (window.frameCount % 20 == 0)
                frac = Fraction.reduce(window.frameCount, 1000);
            bruh.setLaTeX(String.format("\\[ $x^{%d}$ = sin(\\frac{%d}{%d}x) \\]", window.frameCount, frac.getKey(), frac.getValue())); // Change to something
            // That implements Map.Entry and has methods getNumerator and getDenominator (can be Frac class itself?)
            plane.displayText(bruh.scale(sinus));
            step[1] = b.display();
        }

        if (step[1])
            step[2] = b.drawTangentLine(mapInc,true);


        if (step[2]) {
            plane.getCanvas().text("Radius: " + b.getRadius(), 300, -330);
            inc += globalIncrementor;
            plane.getCanvas().textSize(40);
            /* Call to waste time
            int[] useless = RandomDebug.generateRandomIntArr(8);
            Arrays.sort(useless);
            canvas.text(Arrays.toString(useless),400,-270); //String.format("(%s) - (%s)",destinationOnCircleLabel.get(destinationInc == 0 ? destinationOnCircle.length - 1 : destinationInc-1),destinationOnCircleLabel.get(destinationInc))
            Call to waste time */
            float min = destinationOnCircle[destinationInc == 0 ? destinationOnCircle.length - 1 : destinationInc - 1];
            float max = destinationOnCircle[destinationInc];
            mapInc = Mapper.map2(inc % 2, 0f, 2f, -min, -max, SINUSOIDAL, EASE_IN_OUT);

            if (inc % 2 > 2 - globalIncrementor) {
                destinationInc = (destinationInc + 1) % destinationOnCircle.length;
                inc = (float) Useful.ceilAny(inc, globalIncrementor);
            }

            if (!step[3])
                step[3] = destinationInc == 0; //Advance to dir[3]
        }

        if (step[3]) {
            if (incTrack == 0) {
                incTrack = inc;
                frameCountTrack = window.frameCount;
            }

            if (!step[4]) {
                sinus.setAll(Mapper.map2(inc, incTrack, incTrack + 1.5f, 1f, 1.5f, SINUSOIDAL, EASE_IN_OUT));
                step[4] = Math.abs(sinus.getX() - 1.5) < 0.01;
            }
        }

        if (!step[5] && step[4]) { // Stop running once step 5 is true
            sinus.setAll(Mapper.map2(inc, incTrack - 0.5f, incTrack + 1.5f, 0.5f, 1.5f, SINUSOIDAL, EASE_IN_OUT));
            step[5] = window.frameCount - frameCountTrack > 850 && Math.abs(sinus.getX() - 1) < 0.01;
            CanvasObject.getAllObjects(AbsoluteVObject.class).parallelStream()
                    .filter(k -> k.getReasonCreated().equals(Reason.USER_CREATED))
                    .forEach(CanvasObject::fadeOut);

            CanvasObject.getAllObjects(Plane.class).parallelStream().forEach(Plane::fadeOut);
        }

        if (step[5]) {
            sinus.setAll(1);
            System.out.println("reached dis spot homieslice");
        }
        plane.display();
        return step[6];

    }
}
